#include <iostream>#include <cstdio>#include <iomanip>#include <string>#include <cstring>#include <algorithm>#include <cstdlib>#include <vector>#include <queue>#include <stack>#include <cmath>#include <bitset>#include <unordered_set>#include <numeric>#include <set>#include <list>#include <map>using namespace std;#define lower_bound LB#define upper_bound UB#define mem(a, x) memset(a,x,sizeof(a))#define rep(i, a, n) for (int i=a;i<n;i++)#define per(i, a, n) for (int i=n-1;i>=a;i--)#define mp make_pair#define all(x) (x).begin(),(x).end()#define SZ(x) ((int)(x).size())#define IT iterator#define test puts("OK")#define lowbit(x) x & -x#define PRQ priority_queue#define PB push_back#define gcd(a, b) _gcd(a,b)typedef long long LL;typedef unsigned long long uLL;typedef pair<int, int> pii;typedef vector<int> VI;typedef pair<int, int> PII;typedef vector<PII> VPII;const LL mod = 1000000007;const double PI = acos (-1.0);const double eps = 1e-8;const int INF = 0x3f3f3f3f;const int maxn = 100;int main (){#ifndef ONLINE_JUDGE	freopen ("B.txt", "r", stdin);#endif	ios::sync_with_stdio (false);	cin.tie (nullptr);	cout.tie (nullptr);	int n,m;	int dx[] = {0,1,-1,0};	int dy[] = {1,0,0,-1};	string permu = "0123";	char maze[maxn][maxn];	while(cin>>n>>m)	{		int sx,sy;		int ex,ey;		for (int i = 0; i < n; ++i)		{			for (int j = 0; j < m; ++j)			{				cin>>maze[i][j];				if (maze[i][j] == 'S')				{					sx = i;					sy = j;				}				else if (maze[i][j] == 'E')				{					ex = i;					ey = j;				}			}		}		string path;		cin>>path;		int cnt = 0;		do		{			int curX = sx;			int curY = sy;			for (int i = 0; i < path.size(); ++i)			{				int nextX,nextY;				nextX = curX + dx[permu[path[i] - '0'] - '0'];				nextY = curY + dy[permu[path[i] - '0'] - '0'];				if (nextX < 0 || nextX >= n || nextY < 0 || nextY >= m || maze[nextX][nextY] == '#')				{					break;				}				if (nextX == ex && nextY == ey)				{					cnt ++;					break;				}				curX = nextX;				curY = nextY;			}		}while(next_permutation (permu.begin(),permu.end()));		cout<<cnt<<endl;	}	return 0;	}